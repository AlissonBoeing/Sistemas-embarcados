
lab7interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000538  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000069c  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e09  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001a31  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a44  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	04 c1       	rjmp	.+520    	; 0x21e <__vector_5>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	ec d0       	rcall	.+472    	; 0x2ce <main>
  f6:	1e c2       	rjmp	.+1084   	; 0x534 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_Z8debouncev>:


//pino digital 9, PH6
//pino digital 2, PE4

int debounce(){
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	2e 97       	sbiw	r28, 0x0e	; 14
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	a6 e9       	ldi	r26, 0x96	; 150
 114:	b3 e4       	ldi	r27, 0x43	; 67
 116:	89 83       	std	Y+1, r24	; 0x01
 118:	9a 83       	std	Y+2, r25	; 0x02
 11a:	ab 83       	std	Y+3, r26	; 0x03
 11c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	4a e7       	ldi	r20, 0x7A	; 122
 124:	55 e4       	ldi	r21, 0x45	; 69
 126:	69 81       	ldd	r22, Y+1	; 0x01
 128:	7a 81       	ldd	r23, Y+2	; 0x02
 12a:	8b 81       	ldd	r24, Y+3	; 0x03
 12c:	9c 81       	ldd	r25, Y+4	; 0x04
 12e:	77 d1       	rcall	.+750    	; 0x41e <__mulsf3>
 130:	dc 01       	movw	r26, r24
 132:	cb 01       	movw	r24, r22
 134:	8d 83       	std	Y+5, r24	; 0x05
 136:	9e 83       	std	Y+6, r25	; 0x06
 138:	af 83       	std	Y+7, r26	; 0x07
 13a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	40 e8       	ldi	r20, 0x80	; 128
 142:	5f e3       	ldi	r21, 0x3F	; 63
 144:	6d 81       	ldd	r22, Y+5	; 0x05
 146:	7e 81       	ldd	r23, Y+6	; 0x06
 148:	8f 81       	ldd	r24, Y+7	; 0x07
 14a:	98 85       	ldd	r25, Y+8	; 0x08
 14c:	e7 d0       	rcall	.+462    	; 0x31c <__cmpsf2>
 14e:	88 23       	and	r24, r24
 150:	2c f4       	brge	.+10     	; 0x15c <_Z8debouncev+0x62>
		__ticks = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	9a 87       	std	Y+10, r25	; 0x0a
 158:	89 87       	std	Y+9, r24	; 0x09
 15a:	3b c0       	rjmp	.+118    	; 0x1d2 <_Z8debouncev+0xd8>
	else if (__tmp > 65535)
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	3f ef       	ldi	r19, 0xFF	; 255
 160:	4f e7       	ldi	r20, 0x7F	; 127
 162:	57 e4       	ldi	r21, 0x47	; 71
 164:	6d 81       	ldd	r22, Y+5	; 0x05
 166:	7e 81       	ldd	r23, Y+6	; 0x06
 168:	8f 81       	ldd	r24, Y+7	; 0x07
 16a:	98 85       	ldd	r25, Y+8	; 0x08
 16c:	54 d1       	rcall	.+680    	; 0x416 <__gesf2>
 16e:	18 16       	cp	r1, r24
 170:	3c f5       	brge	.+78     	; 0x1c0 <_Z8debouncev+0xc6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 172:	20 e0       	ldi	r18, 0x00	; 0
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	40 e2       	ldi	r20, 0x20	; 32
 178:	51 e4       	ldi	r21, 0x41	; 65
 17a:	69 81       	ldd	r22, Y+1	; 0x01
 17c:	7a 81       	ldd	r23, Y+2	; 0x02
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	9c 81       	ldd	r25, Y+4	; 0x04
 182:	4d d1       	rcall	.+666    	; 0x41e <__mulsf3>
 184:	dc 01       	movw	r26, r24
 186:	cb 01       	movw	r24, r22
 188:	bc 01       	movw	r22, r24
 18a:	cd 01       	movw	r24, r26
 18c:	cb d0       	rcall	.+406    	; 0x324 <__fixunssfsi>
 18e:	dc 01       	movw	r26, r24
 190:	cb 01       	movw	r24, r22
 192:	9a 87       	std	Y+10, r25	; 0x0a
 194:	89 87       	std	Y+9, r24	; 0x09
 196:	0f c0       	rjmp	.+30     	; 0x1b6 <_Z8debouncev+0xbc>
 198:	80 e9       	ldi	r24, 0x90	; 144
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	9c 87       	std	Y+12, r25	; 0x0c
 19e:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 1a0:	8b 85       	ldd	r24, Y+11	; 0x0b
 1a2:	9c 85       	ldd	r25, Y+12	; 0x0c
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <_Z8debouncev+0xaa>
 1a8:	9c 87       	std	Y+12, r25	; 0x0c
 1aa:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ac:	89 85       	ldd	r24, Y+9	; 0x09
 1ae:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	9a 87       	std	Y+10, r25	; 0x0a
 1b4:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b6:	89 85       	ldd	r24, Y+9	; 0x09
 1b8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ba:	89 2b       	or	r24, r25
 1bc:	69 f7       	brne	.-38     	; 0x198 <_Z8debouncev+0x9e>
 1be:	13 c0       	rjmp	.+38     	; 0x1e6 <_Z8debouncev+0xec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1c0:	6d 81       	ldd	r22, Y+5	; 0x05
 1c2:	7e 81       	ldd	r23, Y+6	; 0x06
 1c4:	8f 81       	ldd	r24, Y+7	; 0x07
 1c6:	98 85       	ldd	r25, Y+8	; 0x08
 1c8:	ad d0       	rcall	.+346    	; 0x324 <__fixunssfsi>
 1ca:	dc 01       	movw	r26, r24
 1cc:	cb 01       	movw	r24, r22
 1ce:	9a 87       	std	Y+10, r25	; 0x0a
 1d0:	89 87       	std	Y+9, r24	; 0x09
 1d2:	89 85       	ldd	r24, Y+9	; 0x09
 1d4:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d6:	9e 87       	std	Y+14, r25	; 0x0e
 1d8:	8d 87       	std	Y+13, r24	; 0x0d
 1da:	8d 85       	ldd	r24, Y+13	; 0x0d
 1dc:	9e 85       	ldd	r25, Y+14	; 0x0e
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <_Z8debouncev+0xe4>
 1e2:	9e 87       	std	Y+14, r25	; 0x0e
 1e4:	8d 87       	std	Y+13, r24	; 0x0d

	_delay_ms(300); //metodo para debounce


	if(PINE & (1<<4)) {
 1e6:	8c e2       	ldi	r24, 0x2C	; 44
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	80 71       	andi	r24, 0x10	; 16
 1f4:	99 27       	eor	r25, r25
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	89 2b       	or	r24, r25
 1fa:	09 f4       	brne	.+2      	; 0x1fe <_Z8debouncev+0x104>
 1fc:	20 e0       	ldi	r18, 0x00	; 0
 1fe:	22 23       	and	r18, r18
 200:	19 f0       	breq	.+6      	; 0x208 <_Z8debouncev+0x10e>
		return 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <_Z8debouncev+0x112>
	} else {
		return 0;
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
	}

}
 20c:	2e 96       	adiw	r28, 0x0e	; 14
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <__vector_5>:


ISR(INT4_vect) //interrupção externa 0, quando o botão é pressionado o LED troca de estado
{
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 22e:	0f 92       	push	r0
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
	if(debounce() == 1){
 250:	54 df       	rcall	.-344    	; 0xfa <_Z8debouncev>
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	09 f0       	breq	.+2      	; 0x25a <__vector_5+0x3c>
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	22 23       	and	r18, r18
 25c:	09 f1       	breq	.+66     	; 0x2a0 <__vector_5+0x82>
		if(PINH & (1<<6)) {
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	88 2f       	mov	r24, r24
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	80 74       	andi	r24, 0x40	; 64
 26c:	99 27       	eor	r25, r25
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	89 2b       	or	r24, r25
 272:	09 f4       	brne	.+2      	; 0x276 <__vector_5+0x58>
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	22 23       	and	r18, r18
 278:	51 f0       	breq	.+20     	; 0x28e <__vector_5+0x70>
		PORTH &= ~(1<<PH6);
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	22 e0       	ldi	r18, 0x02	; 2
 280:	31 e0       	ldi	r19, 0x01	; 1
 282:	f9 01       	movw	r30, r18
 284:	20 81       	ld	r18, Z
 286:	2f 7b       	andi	r18, 0xBF	; 191
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
 28c:	09 c0       	rjmp	.+18     	; 0x2a0 <__vector_5+0x82>
		} else {
			PORTH |= (1<<PH6);
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	22 e0       	ldi	r18, 0x02	; 2
 294:	31 e0       	ldi	r19, 0x01	; 1
 296:	f9 01       	movw	r30, r18
 298:	20 81       	ld	r18, Z
 29a:	20 64       	ori	r18, 0x40	; 64
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
		}
	}
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x70005b>
 2c2:	0f 90       	pop	r0
 2c4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x70005f>
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <main>:


int main() {
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62

	 DDRE = 0x00; //PORTD entrada
 2d6:	8d e2       	ldi	r24, 0x2D	; 45
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	fc 01       	movw	r30, r24
 2dc:	10 82       	st	Z, r1
	 PORTE = 0xFF; //pull-ups habilitados
 2de:	8e e2       	ldi	r24, 0x2E	; 46
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
	 DDRH = (1<<6); //somente pino do LED como saída
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	20 e4       	ldi	r18, 0x40	; 64
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
	 PORTH = 0b11011111; //desliga LED e habilita pull-ups
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	2f ed       	ldi	r18, 0xDF	; 223
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
	 UCSR0B = 0x00; /*necessário desabilitar RX e TX para trabalho com os pinos
 2fc:	81 ec       	ldi	r24, 0xC1	; 193
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	fc 01       	movw	r30, r24
 302:	10 82       	st	Z, r1
	 do PORTD no Arduino*/
	 EICRA = 1<<ISC00;//interrupção em qualquer borda
 304:	89 e6       	ldi	r24, 0x69	; 105
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	fc 01       	movw	r30, r24
 30c:	20 83       	st	Z, r18
	 EIMSK = (1<<INT4);//habilita interrupção no D2
 30e:	8d e3       	ldi	r24, 0x3D	; 61
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	20 e1       	ldi	r18, 0x10	; 16
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
	 sei(); //habilita interrupções globais, ativando o bit I do SREG
 318:	78 94       	sei
		}
	}
}


int main() {
 31a:	ff cf       	rjmp	.-2      	; 0x31a <main+0x4c>

0000031c <__cmpsf2>:
 31c:	2f d0       	rcall	.+94     	; 0x37c <__fp_cmp>
 31e:	08 f4       	brcc	.+2      	; 0x322 <__cmpsf2+0x6>
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	08 95       	ret

00000324 <__fixunssfsi>:
 324:	57 d0       	rcall	.+174    	; 0x3d4 <__fp_splitA>
 326:	88 f0       	brcs	.+34     	; 0x34a <__fixunssfsi+0x26>
 328:	9f 57       	subi	r25, 0x7F	; 127
 32a:	90 f0       	brcs	.+36     	; 0x350 <__fixunssfsi+0x2c>
 32c:	b9 2f       	mov	r27, r25
 32e:	99 27       	eor	r25, r25
 330:	b7 51       	subi	r27, 0x17	; 23
 332:	a0 f0       	brcs	.+40     	; 0x35c <__fixunssfsi+0x38>
 334:	d1 f0       	breq	.+52     	; 0x36a <__fixunssfsi+0x46>
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	88 1f       	adc	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	1a f0       	brmi	.+6      	; 0x346 <__fixunssfsi+0x22>
 340:	ba 95       	dec	r27
 342:	c9 f7       	brne	.-14     	; 0x336 <__fixunssfsi+0x12>
 344:	12 c0       	rjmp	.+36     	; 0x36a <__fixunssfsi+0x46>
 346:	b1 30       	cpi	r27, 0x01	; 1
 348:	81 f0       	breq	.+32     	; 0x36a <__fixunssfsi+0x46>
 34a:	5e d0       	rcall	.+188    	; 0x408 <__fp_zero>
 34c:	b1 e0       	ldi	r27, 0x01	; 1
 34e:	08 95       	ret
 350:	5b c0       	rjmp	.+182    	; 0x408 <__fp_zero>
 352:	67 2f       	mov	r22, r23
 354:	78 2f       	mov	r23, r24
 356:	88 27       	eor	r24, r24
 358:	b8 5f       	subi	r27, 0xF8	; 248
 35a:	39 f0       	breq	.+14     	; 0x36a <__fixunssfsi+0x46>
 35c:	b9 3f       	cpi	r27, 0xF9	; 249
 35e:	cc f3       	brlt	.-14     	; 0x352 <__fixunssfsi+0x2e>
 360:	86 95       	lsr	r24
 362:	77 95       	ror	r23
 364:	67 95       	ror	r22
 366:	b3 95       	inc	r27
 368:	d9 f7       	brne	.-10     	; 0x360 <__fixunssfsi+0x3c>
 36a:	3e f4       	brtc	.+14     	; 0x37a <__fixunssfsi+0x56>
 36c:	90 95       	com	r25
 36e:	80 95       	com	r24
 370:	70 95       	com	r23
 372:	61 95       	neg	r22
 374:	7f 4f       	sbci	r23, 0xFF	; 255
 376:	8f 4f       	sbci	r24, 0xFF	; 255
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	08 95       	ret

0000037c <__fp_cmp>:
 37c:	99 0f       	add	r25, r25
 37e:	00 08       	sbc	r0, r0
 380:	55 0f       	add	r21, r21
 382:	aa 0b       	sbc	r26, r26
 384:	e0 e8       	ldi	r30, 0x80	; 128
 386:	fe ef       	ldi	r31, 0xFE	; 254
 388:	16 16       	cp	r1, r22
 38a:	17 06       	cpc	r1, r23
 38c:	e8 07       	cpc	r30, r24
 38e:	f9 07       	cpc	r31, r25
 390:	c0 f0       	brcs	.+48     	; 0x3c2 <__fp_cmp+0x46>
 392:	12 16       	cp	r1, r18
 394:	13 06       	cpc	r1, r19
 396:	e4 07       	cpc	r30, r20
 398:	f5 07       	cpc	r31, r21
 39a:	98 f0       	brcs	.+38     	; 0x3c2 <__fp_cmp+0x46>
 39c:	62 1b       	sub	r22, r18
 39e:	73 0b       	sbc	r23, r19
 3a0:	84 0b       	sbc	r24, r20
 3a2:	95 0b       	sbc	r25, r21
 3a4:	39 f4       	brne	.+14     	; 0x3b4 <__fp_cmp+0x38>
 3a6:	0a 26       	eor	r0, r26
 3a8:	61 f0       	breq	.+24     	; 0x3c2 <__fp_cmp+0x46>
 3aa:	23 2b       	or	r18, r19
 3ac:	24 2b       	or	r18, r20
 3ae:	25 2b       	or	r18, r21
 3b0:	21 f4       	brne	.+8      	; 0x3ba <__fp_cmp+0x3e>
 3b2:	08 95       	ret
 3b4:	0a 26       	eor	r0, r26
 3b6:	09 f4       	brne	.+2      	; 0x3ba <__fp_cmp+0x3e>
 3b8:	a1 40       	sbci	r26, 0x01	; 1
 3ba:	a6 95       	lsr	r26
 3bc:	8f ef       	ldi	r24, 0xFF	; 255
 3be:	81 1d       	adc	r24, r1
 3c0:	81 1d       	adc	r24, r1
 3c2:	08 95       	ret

000003c4 <__fp_split3>:
 3c4:	57 fd       	sbrc	r21, 7
 3c6:	90 58       	subi	r25, 0x80	; 128
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	59 f0       	breq	.+22     	; 0x3e4 <__fp_splitA+0x10>
 3ce:	5f 3f       	cpi	r21, 0xFF	; 255
 3d0:	71 f0       	breq	.+28     	; 0x3ee <__fp_splitA+0x1a>
 3d2:	47 95       	ror	r20

000003d4 <__fp_splitA>:
 3d4:	88 0f       	add	r24, r24
 3d6:	97 fb       	bst	r25, 7
 3d8:	99 1f       	adc	r25, r25
 3da:	61 f0       	breq	.+24     	; 0x3f4 <__fp_splitA+0x20>
 3dc:	9f 3f       	cpi	r25, 0xFF	; 255
 3de:	79 f0       	breq	.+30     	; 0x3fe <__fp_splitA+0x2a>
 3e0:	87 95       	ror	r24
 3e2:	08 95       	ret
 3e4:	12 16       	cp	r1, r18
 3e6:	13 06       	cpc	r1, r19
 3e8:	14 06       	cpc	r1, r20
 3ea:	55 1f       	adc	r21, r21
 3ec:	f2 cf       	rjmp	.-28     	; 0x3d2 <__fp_split3+0xe>
 3ee:	46 95       	lsr	r20
 3f0:	f1 df       	rcall	.-30     	; 0x3d4 <__fp_splitA>
 3f2:	08 c0       	rjmp	.+16     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 3f4:	16 16       	cp	r1, r22
 3f6:	17 06       	cpc	r1, r23
 3f8:	18 06       	cpc	r1, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	f1 cf       	rjmp	.-30     	; 0x3e0 <__fp_splitA+0xc>
 3fe:	86 95       	lsr	r24
 400:	71 05       	cpc	r23, r1
 402:	61 05       	cpc	r22, r1
 404:	08 94       	sec
 406:	08 95       	ret

00000408 <__fp_zero>:
 408:	e8 94       	clt

0000040a <__fp_szero>:
 40a:	bb 27       	eor	r27, r27
 40c:	66 27       	eor	r22, r22
 40e:	77 27       	eor	r23, r23
 410:	cb 01       	movw	r24, r22
 412:	97 f9       	bld	r25, 7
 414:	08 95       	ret

00000416 <__gesf2>:
 416:	b2 df       	rcall	.-156    	; 0x37c <__fp_cmp>
 418:	08 f4       	brcc	.+2      	; 0x41c <__gesf2+0x6>
 41a:	8f ef       	ldi	r24, 0xFF	; 255
 41c:	08 95       	ret

0000041e <__mulsf3>:
 41e:	0b d0       	rcall	.+22     	; 0x436 <__mulsf3x>
 420:	78 c0       	rjmp	.+240    	; 0x512 <__fp_round>
 422:	69 d0       	rcall	.+210    	; 0x4f6 <__fp_pscA>
 424:	28 f0       	brcs	.+10     	; 0x430 <__mulsf3+0x12>
 426:	6e d0       	rcall	.+220    	; 0x504 <__fp_pscB>
 428:	18 f0       	brcs	.+6      	; 0x430 <__mulsf3+0x12>
 42a:	95 23       	and	r25, r21
 42c:	09 f0       	breq	.+2      	; 0x430 <__mulsf3+0x12>
 42e:	5a c0       	rjmp	.+180    	; 0x4e4 <__fp_inf>
 430:	5f c0       	rjmp	.+190    	; 0x4f0 <__fp_nan>
 432:	11 24       	eor	r1, r1
 434:	ea cf       	rjmp	.-44     	; 0x40a <__fp_szero>

00000436 <__mulsf3x>:
 436:	c6 df       	rcall	.-116    	; 0x3c4 <__fp_split3>
 438:	a0 f3       	brcs	.-24     	; 0x422 <__mulsf3+0x4>

0000043a <__mulsf3_pse>:
 43a:	95 9f       	mul	r25, r21
 43c:	d1 f3       	breq	.-12     	; 0x432 <__mulsf3+0x14>
 43e:	95 0f       	add	r25, r21
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	55 1f       	adc	r21, r21
 444:	62 9f       	mul	r22, r18
 446:	f0 01       	movw	r30, r0
 448:	72 9f       	mul	r23, r18
 44a:	bb 27       	eor	r27, r27
 44c:	f0 0d       	add	r31, r0
 44e:	b1 1d       	adc	r27, r1
 450:	63 9f       	mul	r22, r19
 452:	aa 27       	eor	r26, r26
 454:	f0 0d       	add	r31, r0
 456:	b1 1d       	adc	r27, r1
 458:	aa 1f       	adc	r26, r26
 45a:	64 9f       	mul	r22, r20
 45c:	66 27       	eor	r22, r22
 45e:	b0 0d       	add	r27, r0
 460:	a1 1d       	adc	r26, r1
 462:	66 1f       	adc	r22, r22
 464:	82 9f       	mul	r24, r18
 466:	22 27       	eor	r18, r18
 468:	b0 0d       	add	r27, r0
 46a:	a1 1d       	adc	r26, r1
 46c:	62 1f       	adc	r22, r18
 46e:	73 9f       	mul	r23, r19
 470:	b0 0d       	add	r27, r0
 472:	a1 1d       	adc	r26, r1
 474:	62 1f       	adc	r22, r18
 476:	83 9f       	mul	r24, r19
 478:	a0 0d       	add	r26, r0
 47a:	61 1d       	adc	r22, r1
 47c:	22 1f       	adc	r18, r18
 47e:	74 9f       	mul	r23, r20
 480:	33 27       	eor	r19, r19
 482:	a0 0d       	add	r26, r0
 484:	61 1d       	adc	r22, r1
 486:	23 1f       	adc	r18, r19
 488:	84 9f       	mul	r24, r20
 48a:	60 0d       	add	r22, r0
 48c:	21 1d       	adc	r18, r1
 48e:	82 2f       	mov	r24, r18
 490:	76 2f       	mov	r23, r22
 492:	6a 2f       	mov	r22, r26
 494:	11 24       	eor	r1, r1
 496:	9f 57       	subi	r25, 0x7F	; 127
 498:	50 40       	sbci	r21, 0x00	; 0
 49a:	8a f0       	brmi	.+34     	; 0x4be <__mulsf3_pse+0x84>
 49c:	e1 f0       	breq	.+56     	; 0x4d6 <__mulsf3_pse+0x9c>
 49e:	88 23       	and	r24, r24
 4a0:	4a f0       	brmi	.+18     	; 0x4b4 <__mulsf3_pse+0x7a>
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	bb 1f       	adc	r27, r27
 4a8:	66 1f       	adc	r22, r22
 4aa:	77 1f       	adc	r23, r23
 4ac:	88 1f       	adc	r24, r24
 4ae:	91 50       	subi	r25, 0x01	; 1
 4b0:	50 40       	sbci	r21, 0x00	; 0
 4b2:	a9 f7       	brne	.-22     	; 0x49e <__mulsf3_pse+0x64>
 4b4:	9e 3f       	cpi	r25, 0xFE	; 254
 4b6:	51 05       	cpc	r21, r1
 4b8:	70 f0       	brcs	.+28     	; 0x4d6 <__mulsf3_pse+0x9c>
 4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <__fp_inf>
 4bc:	a6 cf       	rjmp	.-180    	; 0x40a <__fp_szero>
 4be:	5f 3f       	cpi	r21, 0xFF	; 255
 4c0:	ec f3       	brlt	.-6      	; 0x4bc <__mulsf3_pse+0x82>
 4c2:	98 3e       	cpi	r25, 0xE8	; 232
 4c4:	dc f3       	brlt	.-10     	; 0x4bc <__mulsf3_pse+0x82>
 4c6:	86 95       	lsr	r24
 4c8:	77 95       	ror	r23
 4ca:	67 95       	ror	r22
 4cc:	b7 95       	ror	r27
 4ce:	f7 95       	ror	r31
 4d0:	e7 95       	ror	r30
 4d2:	9f 5f       	subi	r25, 0xFF	; 255
 4d4:	c1 f7       	brne	.-16     	; 0x4c6 <__mulsf3_pse+0x8c>
 4d6:	fe 2b       	or	r31, r30
 4d8:	88 0f       	add	r24, r24
 4da:	91 1d       	adc	r25, r1
 4dc:	96 95       	lsr	r25
 4de:	87 95       	ror	r24
 4e0:	97 f9       	bld	r25, 7
 4e2:	08 95       	ret

000004e4 <__fp_inf>:
 4e4:	97 f9       	bld	r25, 7
 4e6:	9f 67       	ori	r25, 0x7F	; 127
 4e8:	80 e8       	ldi	r24, 0x80	; 128
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	60 e0       	ldi	r22, 0x00	; 0
 4ee:	08 95       	ret

000004f0 <__fp_nan>:
 4f0:	9f ef       	ldi	r25, 0xFF	; 255
 4f2:	80 ec       	ldi	r24, 0xC0	; 192
 4f4:	08 95       	ret

000004f6 <__fp_pscA>:
 4f6:	00 24       	eor	r0, r0
 4f8:	0a 94       	dec	r0
 4fa:	16 16       	cp	r1, r22
 4fc:	17 06       	cpc	r1, r23
 4fe:	18 06       	cpc	r1, r24
 500:	09 06       	cpc	r0, r25
 502:	08 95       	ret

00000504 <__fp_pscB>:
 504:	00 24       	eor	r0, r0
 506:	0a 94       	dec	r0
 508:	12 16       	cp	r1, r18
 50a:	13 06       	cpc	r1, r19
 50c:	14 06       	cpc	r1, r20
 50e:	05 06       	cpc	r0, r21
 510:	08 95       	ret

00000512 <__fp_round>:
 512:	09 2e       	mov	r0, r25
 514:	03 94       	inc	r0
 516:	00 0c       	add	r0, r0
 518:	11 f4       	brne	.+4      	; 0x51e <__fp_round+0xc>
 51a:	88 23       	and	r24, r24
 51c:	52 f0       	brmi	.+20     	; 0x532 <__fp_round+0x20>
 51e:	bb 0f       	add	r27, r27
 520:	40 f4       	brcc	.+16     	; 0x532 <__fp_round+0x20>
 522:	bf 2b       	or	r27, r31
 524:	11 f4       	brne	.+4      	; 0x52a <__fp_round+0x18>
 526:	60 ff       	sbrs	r22, 0
 528:	04 c0       	rjmp	.+8      	; 0x532 <__fp_round+0x20>
 52a:	6f 5f       	subi	r22, 0xFF	; 255
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	08 95       	ret

00000534 <_exit>:
 534:	f8 94       	cli

00000536 <__stop_program>:
 536:	ff cf       	rjmp	.-2      	; 0x536 <__stop_program>
